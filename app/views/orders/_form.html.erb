<%= form_for(@order, html: { autocomplete: 'off', class: 'order-form' }, data: { disabled: read_only }) do |form| %>
  <div class="container-fluid p-0">
    <!-- Cliente -->
    <div class="row mb-4">
      <div class="col-md-12">
        <div class="card stat-card bg-light-dark">
          <div class="card-header d-flex align-items-center">
            <i class="fas fa-user-circle text-info me-2"></i>
            <h5 class="mb-0 text-white">Informações do Cliente</h5>
          </div>
          <div class="card-body">
            <div class="row">
              <div class="col-md-12">
                <div class="mb-3">
                  <%= form.label :contact_id, 'Cliente:', class: 'form-label text-white' %>
                  <div class="input-group">
                    <%= form.select :contact_id,
                          options_for_select(@contacts.map { |t| ["#{t.nome} - CPF/CNPJ:#{t.cpf_cnpj}", t.id] }, form.object.contact_id),
                          { include_blank: 'Selecione o cliente...' },
                          class: 'form-select bg-dark text-white border-secondary select2', id: 'contact_select' %>
                    <a href="#" id="edit_contact_link" class="btn btn-outline-info" target="_blank" style="display: none;" data-bs-toggle="tooltip" title="Editar cliente">
                      <i class="fas fa-edit"></i>
                    </a>
                  </div>
                </div>
              </div>
            </div>
            <div class="row mt-3">
              <div class="col-md-6">
                <div class="form-check form-switch">
                  <%= form.check_box :use_contact_order, class: 'form-check-input', id: 'use_contact_order' %>
                  <%= form.label :use_contact_order, 'Usar endereço do contato', class: 'form-check-label text-white' %>
                </div>
              </div>
              <div class="col-md-6">
                <div class="form-check form-switch">
                  <%= form.check_box :preference_payment, class: 'form-check-input', id: 'preference_payment' %>
                  <%= form.label :preference_payment, 'Usar preferência de pagamento', class: 'form-check-label text-white' %>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Endereço de Entrega -->
    <div id="div_contact" class="card stat-card bg-light-dark mb-4" style="display: none;">
      <div class="card-header d-flex align-items-center">
        <i class="fas fa-map-marker-alt text-info me-2"></i>
        <h5 class="mb-0 text-white">Endereço de Entrega</h5>
      </div>
      <div class="card-body">
        <div class="row mb-3">
          <div class="col-md-6">
            <%= form.label :endereco, 'Endereço', class: 'form-label text-white' %>
            <%= form.text_field :endereco, class: 'form-control bg-dark text-white border-secondary', placeholder: 'Rua, Avenida, etc.' %>
          </div>
          <div class="col-md-3">
            <%= form.label :numero, 'Número', class: 'form-label text-white' %>
            <%= form.text_field :numero, class: 'form-control bg-dark text-white border-secondary', placeholder: 'Nº' %>
          </div>
          <div class="col-md-3">
            <%= form.label :complemento, 'Complemento', class: 'form-label text-white' %>
            <%= form.text_field :complemento, class: 'form-control bg-dark text-white border-secondary', placeholder: 'Apto, Sala, etc.' %>
          </div>
        </div>
        <div class="row">
          <div class="col-md-4">
            <%= form.label :bairro, 'Bairro', class: 'form-label text-white' %>
            <%= form.text_field :bairro, class: 'form-control bg-dark text-white border-secondary', placeholder: 'Bairro' %>
          </div>
          <div class="col-md-4">
            <%= form.label :cep, 'CEP', class: 'form-label text-white' %>
            <%= form.text_field :cep, class: 'form-control bg-dark text-white border-secondary', placeholder: '00000-000' %>
          </div>
          <div class="col-md-4">
            <%= form.label :uf, 'UF', class: 'form-label text-white' %>
            <%= form.text_field :uf, class: 'form-control bg-dark text-white border-secondary', placeholder: 'Estado' %>
          </div>
        </div>
      </div>
    </div>

    <!-- Produtos -->
    <div class="card stat-card bg-light-dark mb-4">
      <div class="card-header d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center">
          <i class="fas fa-box text-info me-2"></i>
          <h5 class="mb-0 text-white">Itens do Pedido</h5>
        </div>
        <% if params[:action] != 'show' %>
          <%= link_to_add_association form, :order_products, class: 'btn btn-outline-info' do %>
            <i class="fas fa-plus me-2"></i> Adicionar Produto
          <% end %>
        <% end %>
      </div>
      <div class="card-body">
        <div id="order_products">
          <%= form.fields_for :order_products do |pi| %>
            <%= render 'order_product_fields', f: pi %>
          <% end %>
          <% if form.object.order_products.empty? && params[:action] != 'show' %>
            <div class="text-center py-4 text-muted">
              <i class="fas fa-box-open fa-2x mb-2"></i>
              <p>Nenhum produto adicionado. Clique em "Adicionar Produto" para começar.</p>
            </div>
          <% end %>
        </div>
      </div>
    </div>

    <!-- Pagamento -->
    <div class="card stat-card bg-light-dark mb-4">
      <div class="card-header d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center">
          <i class="fas fa-credit-card text-info me-2"></i>
          <h5 class="mb-0 text-white">Pagamento</h5>
        </div>
        <% if params[:action] != 'show' %>
          <%= link_to_add_association form, :order_payments, class: 'btn btn-outline-info', id:'add_order_payment' do %>
            <i class="fas fa-plus me-2"></i> Adicionar Parcela
          <% end %>
        <% end %>
      </div>
      <div class="card-body">
        <div class="row mb-4">
          <div class="col-md-6">
            <%= label_tag 'payment_installments', 'Prazo de Pagamento (dias)', class: 'form-label text-white' %>
            <div class="input-group">
              <%= text_field_tag 'payment_installments', '', class: 'form-control bg-dark text-white border-secondary', placeholder: 'Ex: 10,25,35', id: 'payment_installments' %>
              <span class="input-group-text bg-dark border-secondary text-white">dias</span>
            </div>
            <small class="form-text text-muted">Para pagamento parcelado, separe os prazos por vírgula.</small>
          </div>
        </div>
        
        <div id="order_payments">
          <%= form.fields_for :order_payments do |pi| %>
            <%= render 'order_payment_fields', f: pi %>
          <% end %>
          <% if form.object.order_payments.empty? && params[:action] != 'show' %>
            <div class="text-center py-4 text-muted">
              <i class="fas fa-money-bill-wave fa-2x mb-2"></i>
              <p>Nenhuma parcela adicionada. Defina os prazos acima ou clique em "Adicionar Parcela".</p>
            </div>
          <% end %>
        </div>
      </div>
    </div>

    <!-- Observações -->
    <div class="card stat-card bg-light-dark mb-4">
      <div class="card-header d-flex align-items-center">
        <i class="fas fa-comment text-info me-2"></i>
        <h5 class="mb-0 text-white">Observações</h5>
      </div>
      <div class="card-body">
        <%= form.label :observation, 'Observações do Pedido', class: 'form-label text-white' %>
        <%= form.text_area :observation, class: 'form-control bg-dark text-white border-secondary', rows: 4, placeholder: 'Informações adicionais sobre o pedido...' %>
      </div>
    </div>

    <!-- Botões de Ação e Total do Pedido -->
    <div class="action-bar">
      <div class="d-flex justify-content-between align-items-center">
        <%= link_to orders_path, class: 'btn btn-outline-secondary btn-lg' do %>
          <i class="fas fa-arrow-left me-2"></i> Voltar
        <% end %>
        
        <div class="d-flex align-items-center">
          <% if action_name == 'edit' %>
            <div class="seller-selection me-3">
              <div class="d-flex align-items-center">
                <label for="seller_select" class="form-label text-white mb-0 me-2">Vendedor:</label>
                <%= form.select :seller_id,
                      options_for_select(
                        (@order.destiny == 'primeiros_passos' ? @seller_primeiros_passos : @seller_agua_na_caixa)
                          .map { |s| [s['vendedor']['nome'], s['vendedor']['id'], { 'data-seller-name' => s['vendedor']['nome'] }] }, 
                        @order.seller_id
                      ),
                      { include_blank: 'Selecione...' },
                      { 
                        class: 'form-select bg-dark text-white border-secondary select2', 
                        id: 'seller_select',
                        onchange: "updateSellerName(this)",
                        style: "width: 200px;"
                      } %>
                
                <%= form.hidden_field :seller_name, id: 'seller_name_field', value: @order.seller_name %>
              </div>
            </div>
          <% end %>
          
          <div class="order-total me-3">
            <div class="d-flex align-items-center">
              <span class="text-white me-2">Total:</span>
              <span class="total-value">R$ <span id="total_order">0.00</span></span>
            </div>
          </div>
          
          <% unless read_only %>
            <%= form.button class: 'btn btn-gradient-primary btn-lg', data: { disable_with: @order.new_record? ? 'Criando...' : 'Salvando...' } do %>
              <i class="fas fa-save me-2"></i> <%= @order.new_record? ? 'Criar Pedido' : 'Atualizar Pedido' %>
            <% end %>
          <% end %>
        </div>
      </div>
    </div>
  </div>
<% end %>

<style>
:root {
  --bs-primary: #3a7bd5;
  --bs-secondary: #495057;
  --bs-success: #00b09b;
  --bs-info: #0dcaf0;
  --bs-warning: #ffc107;
  --bs-danger: #dc3545;
  --bs-dark: #212529;
  --bs-darker: #151515;
  --bs-light-dark: #2c3034;
  --bs-border-dark: #373b3e;
}

body {
  background-color: var(--bs-darker);
  color: #f8f9fa;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

/* Action Bar */
.action-bar {
  background-color: var(--bs-light-dark);
  border-radius: 10px;
  padding: 1rem 1.5rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.total-value {
  font-size: 1.5rem;
  font-weight: 700;
  color: var(--bs-info);
}

/* Cards */
.stat-card {
  border: none;
  border-radius: 10px;
  overflow: hidden;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  transition: all 0.3s;
}

.stat-card:hover {
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
}

.stat-card .card-header {
  background-color: rgba(0, 0, 0, 0.2);
  border-bottom: 1px solid var(--bs-border-dark);
  padding: 1rem 1.5rem;
}

.stat-icon {
  font-size: 2rem;
  margin-right: 1rem;
  opacity: 0.8;
  color: rgba(255, 255, 255, 0.9);
}

/* Form Controls */
.form-control, .form-select {
  padding: 0.5rem 1rem;
  font-size: 1rem;
  border-radius: 0.375rem;
}

.form-control:focus, .form-select:focus {
  border-color: var(--bs-info);
  box-shadow: 0 0 0 0.25rem rgba(13, 202, 240, 0.25);
}

.form-check-input:checked {
  background-color: var(--bs-info);
  border-color: var(--bs-info);
}

/* Gradient Backgrounds */
.bg-gradient-primary {
  background: linear-gradient(45deg, #3a7bd5, #00d2ff);
}

.bg-gradient-info {
  background: linear-gradient(45deg, #0072ff, #00c6ff);
}

.bg-light-dark {
  background-color: var(--bs-light-dark);
}

/* Buttons */
.btn-gradient-primary {
  background: linear-gradient(45deg, #3a7bd5, #00d2ff);
  border: none;
  color: white;
  transition: all 0.3s;
}

.btn-gradient-primary:hover {
  background: linear-gradient(45deg, #2a6ac4, #00bfe9);
  transform: translateY(-2px);
  box-shadow: 0 4px 15px rgba(58, 123, 213, 0.4);
}

.btn-outline-info {
  color: var(--bs-info);
  border-color: var(--bs-info);
}

.btn-outline-info:hover {
  background-color: var(--bs-info);
  color: #212529;
}

/* Badges */
.badge {
  padding: 0.5em 0.75em;
  font-weight: 500;
  border-radius: 6px;
}

/* Select2 Styling */
.select2-container--default .select2-selection--single {
  background-color: var(--bs-dark);
  border: 1px solid var(--bs-border-dark);
  border-radius: 0.375rem;
  height: calc(2.5rem + 2px);
}

.select2-container--default .select2-selection--single .select2-selection__rendered {
  color: #fff;
  line-height: 2.5rem;
  padding-left: 1rem;
}

.select2-container--default .select2-selection--single .select2-selection__arrow {
  height: 2.5rem;
}

.select2-dropdown {
  background-color: var(--bs-dark);
  border: 1px solid var(--bs-border-dark);
}

.select2-container--default .select2-results__option--highlighted[aria-selected] {
  background-color: var(--bs-info);
  color: #212529;
}

.select2-container--default .select2-results__option[aria-selected=true] {
  background-color: var(--bs-secondary);
}

.select2-results__option {
  color: #fff;
  padding: 0.5rem 1rem;
}

/* Product and Payment Fields */
#order-product-container, #order-payment-container {
  background-color: rgba(0, 0, 0, 0.1);
  border-radius: 8px;
  padding: 15px;
  margin-bottom: 15px;
  border: 1px solid var(--bs-border-dark);
}

/* Responsive */
@media (max-width: 992px) {
  .action-bar .d-flex {
    flex-direction: column;
    align-items: flex-start;
  }
  
  .action-bar .d-flex > div:last-child {
    margin-top: 1rem;
    display: flex;
    flex-direction: column;
    width: 100%;
  }
  
  .seller-selection, .order-total {
    margin-bottom: 1rem;
    width: 100%;
  }
  
  .seller-selection select {
    width: 100% !important;
  }
  
  .btn-gradient-primary {
    width: 100%;
    margin-left: 0 !important;
  }
}

@media (max-width: 768px) {
  .action-bar .d-flex {
    flex-direction: column;
    align-items: flex-start;
  }
  
  .action-bar .d-flex > div:first-child {
    margin-bottom: 1rem;
    width: 100%;
  }
  
  .action-bar .d-flex > div:last-child {
    width: 100%;
  }
}
</style>

<script>
function updateSellerName(selectElement) {
  const selectedOption = selectElement.options[selectElement.selectedIndex];
  const sellerNameField = document.getElementById('seller_name_field');
  const sellerNameDisplay = document.getElementById('seller_name_display');
  
  if (selectedOption) {
    const sellerName = selectedOption.dataset.sellerName || '';
    sellerNameField.value = sellerName;
    if (sellerNameDisplay) {
      sellerNameDisplay.textContent = sellerName || 'Nenhum selecionado';
    }
  }
}

document.addEventListener("DOMContentLoaded", function() {
  // Ativa tooltips
  const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
  tooltipTriggerList.map(function (tooltipTriggerEl) {
    return new bootstrap.Tooltip(tooltipTriggerEl, {
      boundary: document.body
    });
  });

  // Inicializa select2
  $('.select2').select2({
    theme: 'bootstrap-5',
    dropdownParent: $('body'),
    width: '100%',
    language: 'pt-BR'
  });

  const sellerSelect = document.getElementById('seller_select');
  const sellerNameField = document.getElementById('seller_name_field');
  
  if (sellerSelect) {
    sellerSelect.addEventListener('change', function() {
      const selectedOption = this.options[this.selectedIndex];
      if (selectedOption) {
        sellerNameField.value = selectedOption.dataset.sellerName || '';
      }
    });
    
    const event = new Event('change');
    sellerSelect.dispatchEvent(event);
  }

  const preferenceCheckbox = document.getElementById('preference_payment');
  const paymentTypeRows = document.querySelectorAll('.payment-type-row');

  function togglePaymentTypeVisibility() {
    paymentTypeRows.forEach(row => {
      const paymentTypeDiv = row.querySelector('.payment-type');
      if (preferenceCheckbox && preferenceCheckbox.checked) {
        paymentTypeDiv.style.display = 'none';
      } else {
        paymentTypeDiv.style.display = '';
      }
    });
  }

  if (preferenceCheckbox) {
    preferenceCheckbox.addEventListener('change', togglePaymentTypeVisibility);
    togglePaymentTypeVisibility();
  }

  $('#order_payments').on('cocoon:after-insert', function(e, added_task) {
    const newPaymentTypeRow = added_task.querySelector('.payment-type-row');
    const newPaymentTypeDiv = newPaymentTypeRow.querySelector('.payment-type');

    if (preferenceCheckbox && preferenceCheckbox.checked) {
      newPaymentTypeDiv.style.display = 'none';
    } else {
      newPaymentTypeDiv.style.display = '';
    }
    
    $(added_task).find("select.select2").select2({
      theme: 'bootstrap-5',
      dropdownParent: $('body'),
      width: '100%',
      language: 'pt-BR'
    });
  });

  const contactCheckbox = document.getElementById('use_contact_order');
  const contactDiv = document.getElementById('div_contact');

  function toggleContactDiv() {
    if (contactCheckbox && contactCheckbox.checked) {
      contactDiv.style.display = 'none';
    } else {
      contactDiv.style.display = 'block';
    }
  }

  if (contactCheckbox && contactDiv) {
    contactCheckbox.addEventListener('change', toggleContactDiv);
    toggleContactDiv();
  }

  const contactSelect = document.getElementById('contact_select');
  const editContactLink = document.getElementById('edit_contact_link');

  function updateEditLink() {
    const selectedContactId = contactSelect.value;
    if (selectedContactId) {
      editContactLink.href = `/contacts/${selectedContactId}/edit`;
      editContactLink.style.display = 'inline-block';
    } else {
      editContactLink.style.display = 'none';
    }
  }

  if (contactSelect && editContactLink) {
    $(contactSelect).on('select2:select', updateEditLink);
    updateEditLink();
  }

  $('#order_products').on('cocoon:after-insert', function(e, added_task) {
    $(added_task).find("select.select2").select2({
      theme: 'bootstrap-5',
      dropdownParent: $('body'),
      width: '100%',
      language: 'pt-BR'
    });
  });

  const paymentInstallmentsField = document.getElementById('payment_installments');
  const orderPaymentsContainer = document.getElementById('order_payments');

  function updateOrderPayments() {
    if (!paymentInstallmentsField || !orderPaymentsContainer) return;
    
    const values = paymentInstallmentsField.value.split(',').map(value => parseInt(value.trim())).filter(value => !isNaN(value));
    const totalOrder = calculateTotal();

    const currentFields = orderPaymentsContainer.querySelectorAll('.nested-fields');
    currentFields.forEach(field => field.remove());

    if (values.length > 0) {
      // Remove placeholder message if it exists
      const placeholderDiv = orderPaymentsContainer.querySelector('.text-center.py-4');
      if (placeholderDiv) {
        placeholderDiv.remove();
      }
      
      values.forEach((days, index) => {
        const newField = document.createElement('div');
        newField.classList.add('nested-fields');
        newField.id = 'order-payment-container';

        const installmentDate = new Date();
        installmentDate.setDate(installmentDate.getDate() + days);
        const formattedDate = installmentDate.toISOString().split('T')[0];

        const installmentAmount = (totalOrder / values.length).toFixed(2);

        newField.innerHTML = `
          <div class="row mb-3" data-tag-id="new_${index}">
            <div class="col-md-4">
              <label class="form-label text-white">Tipo de Pagamento</label>
              <div class="payment-type">
                <select class="form-select bg-dark text-white border-secondary select2" name="order[order_payments_attributes][${index}][order_payment_type_id]">
                  ${getPaymentTypesOptions()}
                </select>
              </div>
            </div>
            <div class="col-md-2">
              <label class="form-label text-white">Valor (R$)</label>
              <div class="input-group">
                <span class="input-group-text bg-dark border-secondary text-white">R$</span>
                <input type="text" name="order[order_payments_attributes][${index}][amount]" class="form-control bg-dark text-white border-secondary" value="${installmentAmount}" required>
              </div>
            </div>
            <div class="col-md-2">
              <label class="form-label text-white">Data</label>
              <input type="date" name="order[order_payments_attributes][${index}][date]" class="form-control bg-dark text-white border-secondary" value="${formattedDate}">
            </div>
            <div class="col-md-3">
              <label class="form-label text-white">Observação</label>
              <input type="text" name="order[order_payments_attributes][${index}][note]" class="form-control bg-dark text-white border-secondary">
            </div>
            <div class="col-md-1 d-flex align-items-end justify-content-center">
              <button type="button" class="btn btn-outline-danger remove-order-payment">
                <i class="fas fa-trash"></i>
              </button>
            </div>
          </div>
        `;
        orderPaymentsContainer.appendChild(newField);
        
        $(newField).find('select.select2').select2({
          theme: 'bootstrap-5',
          dropdownParent: $('body'),
          width: '100%',
          language: 'pt-BR'
        });
        
        $(newField).find('.remove-order-payment').on('click', function() {
          $(this).closest('.nested-fields').remove();
          calculateTotal();
          updatePaymentAmounts(calculateTotal());
        });
      });
    }
  }

  function getPaymentTypesOptions() {
    return `<% @payment_types.each do |t| %>
              <option value="<%= t.id %>"><%= "#{t.payment_method} - #{t.payment_channel}" %></option>
            <% end %>`;
  }

  if (paymentInstallmentsField) {
    paymentInstallmentsField.addEventListener('input', updateOrderPayments);
  }

  function calculateTotal() {
    let total = 0;

    document.querySelectorAll('#order_products .nested-fields').forEach(function(container) {
      const quantidadeInput = container.querySelector('input[name*="[quantidade]"]');
      const precoInput = container.querySelector('input[name*="[price]"]');
      
      if (quantidadeInput && precoInput) {
        const quantidadeStr = quantidadeInput.value.replace(',', '.');
        const precoStr = precoInput.value.replace(',', '.');
        
        const quantidade = parseFloat(quantidadeStr) || 0;
        const preco = parseFloat(precoStr) || 0;
        
        const subtotal = quantidade * preco;
        total += subtotal;
      }
    });

    const totalOrderElement = document.getElementById('total_order');
    if (totalOrderElement) {
      totalOrderElement.textContent = total.toFixed(2);
    }
    return total;
  }

  function updatePaymentAmounts(total) {
    const paymentFields = document.querySelectorAll('#order_payments .nested-fields');
    if (paymentFields.length > 0) {
      const installmentValue = (total / paymentFields.length).toFixed(2);
      paymentFields.forEach(field => {
        const amountInput = field.querySelector('input[name*="[amount]"]');
        if (amountInput) {
          amountInput.value = installmentValue;
        }
      });
    }
  }

  document.addEventListener('change', function(event) {
    if (event.target.matches('input[name*="[quantidade]"], input[name*="[price]"]')) {
      const total = calculateTotal();
      updatePaymentAmounts(total);
    }
  });

  document.addEventListener('input', function(event) {
    if (event.target.matches('input[name*="[quantidade]"], input[name*="[price]"]')) {
      const total = calculateTotal();
      updatePaymentAmounts(total);
    }
  });

  document.addEventListener('click', function(event) {
    if (event.target.closest('.remove_fields')) {
      setTimeout(() => {
        const total = calculateTotal();
        updatePaymentAmounts(total);
      }, 0);
    }
  });

  document.addEventListener('cocoon:after-insert', function(e, insertedItem) {
    if (insertedItem.closest('#order_products')) {
      const total = calculateTotal();
      updatePaymentAmounts(total);
    }
  });

  calculateTotal();
});
</script>